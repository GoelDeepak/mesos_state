%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.20.3 on {{2016,5,27},{16,52,6}}
-module(mesos_state_overlay_pb).
-dialyzer({nowarn_function, [
	mk_type_error/3,
	fetch_rpc_def/2,
	v_msg_mesos_state_agentoverlayinfo/2,
	v_msg_mesos_state_agentinfo/2
]}).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_AgentOverlayInfo.State.Status'/1, 'enum_value_by_symbol_AgentOverlayInfo.State.Status'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("mesos_state_overlay_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'AgentOverlayInfo.State.Status'() :: 'STATUS_INVALID' | 'STATUS_OK' | 'STATUS_FAILED'.
-export_type(['AgentOverlayInfo.State.Status'/0]).

%% message types
-type 'mesos_state_agentoverlayinfo.state'() :: #'mesos_state_agentoverlayinfo.state'{}.
-type mesos_state_vxlaninfo() :: #mesos_state_vxlaninfo{}.
-type mesos_state_backendinfo() :: #mesos_state_backendinfo{}.
-type mesos_state_bridgeinfo() :: #mesos_state_bridgeinfo{}.
-type mesos_state_overlayinfo() :: #mesos_state_overlayinfo{}.
-type mesos_state_agentoverlayinfo() :: #mesos_state_agentoverlayinfo{}.
-type mesos_state_agentinfo() :: #mesos_state_agentinfo{}.
-type mesos_state_state() :: #mesos_state_state{}.
-type mesos_state_networkconfig() :: #mesos_state_networkconfig{}.
-export_type(['mesos_state_agentoverlayinfo.state'/0, 'mesos_state_vxlaninfo'/0, 'mesos_state_backendinfo'/0, 'mesos_state_bridgeinfo'/0, 'mesos_state_overlayinfo'/0, 'mesos_state_agentoverlayinfo'/0, 'mesos_state_agentinfo'/0, 'mesos_state_state'/0, 'mesos_state_networkconfig'/0]).

encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #'mesos_state_agentoverlayinfo.state'{} ->
	  'e_msg_mesos_state_agentoverlayinfo.state'(Msg);
      #mesos_state_vxlaninfo{} ->
	  e_msg_mesos_state_vxlaninfo(Msg);
      #mesos_state_backendinfo{} ->
	  e_msg_mesos_state_backendinfo(Msg);
      #mesos_state_bridgeinfo{} ->
	  e_msg_mesos_state_bridgeinfo(Msg);
      #mesos_state_overlayinfo{} ->
	  e_msg_mesos_state_overlayinfo(Msg);
      #mesos_state_agentoverlayinfo{} ->
	  e_msg_mesos_state_agentoverlayinfo(Msg);
      #mesos_state_agentinfo{} ->
	  e_msg_mesos_state_agentinfo(Msg);
      #mesos_state_state{} -> e_msg_mesos_state_state(Msg);
      #mesos_state_networkconfig{} ->
	  e_msg_mesos_state_networkconfig(Msg)
    end.


'e_enum_AgentOverlayInfo.State.Status'('STATUS_INVALID',
				       Bin) ->
    <<Bin/binary, 0>>;
'e_enum_AgentOverlayInfo.State.Status'('STATUS_OK',
				       Bin) ->
    <<Bin/binary, 1>>;
'e_enum_AgentOverlayInfo.State.Status'('STATUS_FAILED',
				       Bin) ->
    <<Bin/binary, 2>>.

'e_msg_mesos_state_agentoverlayinfo.state'(Msg) ->
    'e_msg_mesos_state_agentoverlayinfo.state'(Msg, <<>>).


'e_msg_mesos_state_agentoverlayinfo.state'(#'mesos_state_agentoverlayinfo.state'{status
										     =
										     F1,
										 error
										     =
										     F2},
					   Bin) ->
    B1 = 'e_enum_AgentOverlayInfo.State.Status'(F1,
						<<Bin/binary, 8>>),
    if F2 == undefined -> B1;
       true -> e_type_string(F2, <<B1/binary, 18>>)
    end.

e_msg_mesos_state_vxlaninfo(Msg) ->
    e_msg_mesos_state_vxlaninfo(Msg, <<>>).


e_msg_mesos_state_vxlaninfo(#mesos_state_vxlaninfo{vni =
						       F1,
						   vtep_name = F2, vtep_ip = F3,
						   vtep_mac = F4},
			    Bin) ->
    B1 = e_varint(F1, <<Bin/binary, 8>>),
    B2 = e_type_string(F2, <<B1/binary, 18>>),
    B3 = e_type_string(F3, <<B2/binary, 26>>),
    e_type_string(F4, <<B3/binary, 34>>).

e_msg_mesos_state_backendinfo(Msg) ->
    e_msg_mesos_state_backendinfo(Msg, <<>>).


e_msg_mesos_state_backendinfo(#mesos_state_backendinfo{vxlan
							   = F1},
			      Bin) ->
    if F1 == undefined -> Bin;
       true ->
	   e_mfield_mesos_state_backendinfo_vxlan(F1,
						  <<Bin/binary, 10>>)
    end.

e_msg_mesos_state_bridgeinfo(Msg) ->
    e_msg_mesos_state_bridgeinfo(Msg, <<>>).


e_msg_mesos_state_bridgeinfo(#mesos_state_bridgeinfo{name
							 = F1,
						     ip = F2},
			     Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    e_type_string(F2, <<B1/binary, 18>>).

e_msg_mesos_state_overlayinfo(Msg) ->
    e_msg_mesos_state_overlayinfo(Msg, <<>>).


e_msg_mesos_state_overlayinfo(#mesos_state_overlayinfo{name
							   = F1,
						       subnet = F2,
						       prefix = F3},
			      Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_type_string(F2, <<B1/binary, 18>>),
    e_varint(F3, <<B2/binary, 24>>).

e_msg_mesos_state_agentoverlayinfo(Msg) ->
    e_msg_mesos_state_agentoverlayinfo(Msg, <<>>).


e_msg_mesos_state_agentoverlayinfo(#mesos_state_agentoverlayinfo{info
								     = F1,
								 subnet = F2,
								 mesos_bridge =
								     F3,
								 docker_bridge =
								     F4,
								 backend = F5,
								 state = F6},
				   Bin) ->
    B1 = e_mfield_mesos_state_agentoverlayinfo_info(F1,
						    <<Bin/binary, 10>>),
    B2 = e_type_string(F2, <<B1/binary, 18>>),
    B3 = if F3 == undefined -> B2;
	    true ->
		e_mfield_mesos_state_agentoverlayinfo_mesos_bridge(F3,
								   <<B2/binary,
								     26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		e_mfield_mesos_state_agentoverlayinfo_docker_bridge(F4,
								    <<B3/binary,
								      34>>)
	 end,
    B5 = e_mfield_mesos_state_agentoverlayinfo_backend(F5,
						       <<B4/binary, 42>>),
    if F6 == undefined -> B5;
       true ->
	   e_mfield_mesos_state_agentoverlayinfo_state(F6,
						       <<B5/binary, 50>>)
    end.

e_msg_mesos_state_agentinfo(Msg) ->
    e_msg_mesos_state_agentinfo(Msg, <<>>).


e_msg_mesos_state_agentinfo(#mesos_state_agentinfo{ip =
						       F1,
						   overlays = F2},
			    Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    if F2 == [] -> B1;
       true -> e_field_mesos_state_agentinfo_overlays(F2, B1)
    end.

e_msg_mesos_state_state(Msg) ->
    e_msg_mesos_state_state(Msg, <<>>).


e_msg_mesos_state_state(#mesos_state_state{overlays =
					       F1,
					   agents = F2},
			Bin) ->
    B1 = if F1 == [] -> Bin;
	    true -> e_field_mesos_state_state_overlays(F1, Bin)
	 end,
    if F2 == [] -> B1;
       true -> e_field_mesos_state_state_agents(F2, B1)
    end.

e_msg_mesos_state_networkconfig(Msg) ->
    e_msg_mesos_state_networkconfig(Msg, <<>>).


e_msg_mesos_state_networkconfig(#mesos_state_networkconfig{vtep_subnet
							       = F1,
							   vtep_mac_oui = F2,
							   overlays = F3},
				Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_type_string(F2, <<B1/binary, 18>>),
    if F3 == [] -> B2;
       true ->
	   e_field_mesos_state_networkconfig_overlays(F3, B2)
    end.

e_mfield_mesos_state_backendinfo_vxlan(Msg, Bin) ->
    SubBin = e_msg_mesos_state_vxlaninfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mesos_state_agentoverlayinfo_info(Msg, Bin) ->
    SubBin = e_msg_mesos_state_overlayinfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mesos_state_agentoverlayinfo_mesos_bridge(Msg,
						   Bin) ->
    SubBin = e_msg_mesos_state_bridgeinfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mesos_state_agentoverlayinfo_docker_bridge(Msg,
						    Bin) ->
    SubBin = e_msg_mesos_state_bridgeinfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mesos_state_agentoverlayinfo_backend(Msg,
					      Bin) ->
    SubBin = e_msg_mesos_state_backendinfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mesos_state_agentoverlayinfo_state(Msg, Bin) ->
    SubBin = 'e_msg_mesos_state_agentoverlayinfo.state'(Msg,
							<<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mesos_state_agentinfo_overlays(Msg, Bin) ->
    SubBin = e_msg_mesos_state_agentoverlayinfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_mesos_state_agentinfo_overlays([Elem | Rest],
				       Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_mesos_state_agentinfo_overlays(Elem,
						   Bin2),
    e_field_mesos_state_agentinfo_overlays(Rest, Bin3);
e_field_mesos_state_agentinfo_overlays([], Bin) -> Bin.

e_mfield_mesos_state_state_overlays(Msg, Bin) ->
    SubBin = e_msg_mesos_state_overlayinfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_mesos_state_state_overlays([Elem | Rest],
				   Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_mesos_state_state_overlays(Elem, Bin2),
    e_field_mesos_state_state_overlays(Rest, Bin3);
e_field_mesos_state_state_overlays([], Bin) -> Bin.

e_mfield_mesos_state_state_agents(Msg, Bin) ->
    SubBin = e_msg_mesos_state_agentinfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_mesos_state_state_agents([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_mesos_state_state_agents(Elem, Bin2),
    e_field_mesos_state_state_agents(Rest, Bin3);
e_field_mesos_state_state_agents([], Bin) -> Bin.

e_mfield_mesos_state_networkconfig_overlays(Msg, Bin) ->
    SubBin = e_msg_mesos_state_overlayinfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_mesos_state_networkconfig_overlays([Elem
					    | Rest],
					   Bin) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_mesos_state_networkconfig_overlays(Elem,
						       Bin2),
    e_field_mesos_state_networkconfig_overlays(Rest, Bin3);
e_field_mesos_state_networkconfig_overlays([], Bin) ->
    Bin.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      'mesos_state_agentoverlayinfo.state' ->
	  'd_msg_mesos_state_agentoverlayinfo.state'(Bin);
      mesos_state_vxlaninfo ->
	  d_msg_mesos_state_vxlaninfo(Bin);
      mesos_state_backendinfo ->
	  d_msg_mesos_state_backendinfo(Bin);
      mesos_state_bridgeinfo ->
	  d_msg_mesos_state_bridgeinfo(Bin);
      mesos_state_overlayinfo ->
	  d_msg_mesos_state_overlayinfo(Bin);
      mesos_state_agentoverlayinfo ->
	  d_msg_mesos_state_agentoverlayinfo(Bin);
      mesos_state_agentinfo ->
	  d_msg_mesos_state_agentinfo(Bin);
      mesos_state_state -> d_msg_mesos_state_state(Bin);
      mesos_state_networkconfig ->
	  d_msg_mesos_state_networkconfig(Bin)
    end.



'd_enum_AgentOverlayInfo.State.Status'(0) ->
    'STATUS_INVALID';
'd_enum_AgentOverlayInfo.State.Status'(1) ->
    'STATUS_OK';
'd_enum_AgentOverlayInfo.State.Status'(2) ->
    'STATUS_FAILED'.

'd_msg_mesos_state_agentoverlayinfo.state'(Bin) ->
    'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Bin,
							    0, 0, undefined,
							    undefined).

'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(<<8,
							  Rest/binary>>,
							Z1, Z2, F1, F2) ->
    'd_field_mesos_state_agentoverlayinfo.state_status'(Rest,
							Z1, Z2, F1, F2);
'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(<<18,
							  Rest/binary>>,
							Z1, Z2, F1, F2) ->
    'd_field_mesos_state_agentoverlayinfo.state_error'(Rest,
						       Z1, Z2, F1, F2);
'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(<<>>,
							0, 0, F1, F2) ->
    #'mesos_state_agentoverlayinfo.state'{status = F1,
					  error = F2};
'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Other,
							Z1, Z2, F1, F2) ->
    'dg_read_field_def_mesos_state_agentoverlayinfo.state'(Other,
							   Z1, Z2, F1, F2).

'dg_read_field_def_mesos_state_agentoverlayinfo.state'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos_state_agentoverlayinfo.state'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2);
'dg_read_field_def_mesos_state_agentoverlayinfo.state'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_mesos_state_agentoverlayinfo.state_status'(Rest,
							      0, 0, F1, F2);
      18 ->
	  'd_field_mesos_state_agentoverlayinfo.state_error'(Rest,
							     0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos_state_agentoverlayinfo.state'(Rest,
								 0, 0, F1, F2);
	    1 ->
		'skip_64_mesos_state_agentoverlayinfo.state'(Rest, 0, 0,
							     F1, F2);
	    2 ->
		'skip_length_delimited_mesos_state_agentoverlayinfo.state'(Rest,
									   0, 0,
									   F1,
									   F2);
	    5 ->
		'skip_32_mesos_state_agentoverlayinfo.state'(Rest, 0, 0,
							     F1, F2)
	  end
    end;
'dg_read_field_def_mesos_state_agentoverlayinfo.state'(<<>>,
						       0, 0, F1, F2) ->
    #'mesos_state_agentoverlayinfo.state'{status = F1,
					  error = F2}.

'd_field_mesos_state_agentoverlayinfo.state_status'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos_state_agentoverlayinfo.state_status'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2);
'd_field_mesos_state_agentoverlayinfo.state_status'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, _, F2) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_AgentOverlayInfo.State.Status'(Tmp),
    'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Rest,
							    0, 0, NewFValue,
							    F2).


'd_field_mesos_state_agentoverlayinfo.state_error'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos_state_agentoverlayinfo.state_error'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2);
'd_field_mesos_state_agentoverlayinfo.state_error'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Rest2,
							    0, 0, F1,
							    NewFValue).


'skip_varint_mesos_state_agentoverlayinfo.state'(<<1:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F1, F2) ->
    'skip_varint_mesos_state_agentoverlayinfo.state'(Rest,
						     Z1, Z2, F1, F2);
'skip_varint_mesos_state_agentoverlayinfo.state'(<<0:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Rest,
							    Z1, Z2, F1, F2).


'skip_length_delimited_mesos_state_agentoverlayinfo.state'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos_state_agentoverlayinfo.state'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F1, F2);
'skip_length_delimited_mesos_state_agentoverlayinfo.state'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Rest2,
							    0, 0, F1, F2).


'skip_32_mesos_state_agentoverlayinfo.state'(<<_:32,
					       Rest/binary>>,
					     Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Rest,
							    Z1, Z2, F1, F2).


'skip_64_mesos_state_agentoverlayinfo.state'(<<_:64,
					       Rest/binary>>,
					     Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos_state_agentoverlayinfo.state'(Rest,
							    Z1, Z2, F1, F2).


d_msg_mesos_state_vxlaninfo(Bin) ->
    dfp_read_field_def_mesos_state_vxlaninfo(Bin, 0, 0,
					     undefined, undefined, undefined,
					     undefined).

dfp_read_field_def_mesos_state_vxlaninfo(<<8,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4) ->
    d_field_mesos_state_vxlaninfo_vni(Rest, Z1, Z2, F1, F2,
				      F3, F4);
dfp_read_field_def_mesos_state_vxlaninfo(<<18,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4) ->
    d_field_mesos_state_vxlaninfo_vtep_name(Rest, Z1, Z2,
					    F1, F2, F3, F4);
dfp_read_field_def_mesos_state_vxlaninfo(<<26,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4) ->
    d_field_mesos_state_vxlaninfo_vtep_ip(Rest, Z1, Z2, F1,
					  F2, F3, F4);
dfp_read_field_def_mesos_state_vxlaninfo(<<34,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4) ->
    d_field_mesos_state_vxlaninfo_vtep_mac(Rest, Z1, Z2, F1,
					   F2, F3, F4);
dfp_read_field_def_mesos_state_vxlaninfo(<<>>, 0, 0, F1,
					 F2, F3, F4) ->
    #mesos_state_vxlaninfo{vni = F1, vtep_name = F2,
			   vtep_ip = F3, vtep_mac = F4};
dfp_read_field_def_mesos_state_vxlaninfo(Other, Z1, Z2,
					 F1, F2, F3, F4) ->
    dg_read_field_def_mesos_state_vxlaninfo(Other, Z1, Z2,
					    F1, F2, F3, F4).

dg_read_field_def_mesos_state_vxlaninfo(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_vxlaninfo(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4);
dg_read_field_def_mesos_state_vxlaninfo(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_mesos_state_vxlaninfo_vni(Rest, 0, 0, F1, F2,
					    F3, F4);
      18 ->
	  d_field_mesos_state_vxlaninfo_vtep_name(Rest, 0, 0, F1,
						  F2, F3, F4);
      26 ->
	  d_field_mesos_state_vxlaninfo_vtep_ip(Rest, 0, 0, F1,
						F2, F3, F4);
      34 ->
	  d_field_mesos_state_vxlaninfo_vtep_mac(Rest, 0, 0, F1,
						 F2, F3, F4);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mesos_state_vxlaninfo(Rest, 0, 0, F1, F2,
						  F3, F4);
	    1 ->
		skip_64_mesos_state_vxlaninfo(Rest, 0, 0, F1, F2, F3,
					      F4);
	    2 ->
		skip_length_delimited_mesos_state_vxlaninfo(Rest, 0, 0,
							    F1, F2, F3, F4);
	    5 ->
		skip_32_mesos_state_vxlaninfo(Rest, 0, 0, F1, F2, F3,
					      F4)
	  end
    end;
dg_read_field_def_mesos_state_vxlaninfo(<<>>, 0, 0, F1,
					F2, F3, F4) ->
    #mesos_state_vxlaninfo{vni = F1, vtep_name = F2,
			   vtep_ip = F3, vtep_mac = F4}.

d_field_mesos_state_vxlaninfo_vni(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_mesos_state_vxlaninfo_vni(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4);
d_field_mesos_state_vxlaninfo_vni(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, F3, F4) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_mesos_state_vxlaninfo(Rest, 0, 0,
					     NewFValue, F2, F3, F4).


d_field_mesos_state_vxlaninfo_vtep_name(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_mesos_state_vxlaninfo_vtep_name(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4);
d_field_mesos_state_vxlaninfo_vtep_name(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, _, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_vxlaninfo(Rest2, 0, 0,
					     F1, NewFValue, F3, F4).


d_field_mesos_state_vxlaninfo_vtep_ip(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_mesos_state_vxlaninfo_vtep_ip(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4);
d_field_mesos_state_vxlaninfo_vtep_ip(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, _, F4) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_vxlaninfo(Rest2, 0, 0,
					     F1, F2, NewFValue, F4).


d_field_mesos_state_vxlaninfo_vtep_mac(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_mesos_state_vxlaninfo_vtep_mac(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4);
d_field_mesos_state_vxlaninfo_vtep_mac(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_vxlaninfo(Rest2, 0, 0,
					     F1, F2, F3, NewFValue).


skip_varint_mesos_state_vxlaninfo(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4) ->
    skip_varint_mesos_state_vxlaninfo(Rest, Z1, Z2, F1, F2,
				      F3, F4);
skip_varint_mesos_state_vxlaninfo(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_mesos_state_vxlaninfo(Rest, Z1, Z2,
					     F1, F2, F3, F4).


skip_length_delimited_mesos_state_vxlaninfo(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_mesos_state_vxlaninfo(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4);
skip_length_delimited_mesos_state_vxlaninfo(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_vxlaninfo(Rest2, 0, 0,
					     F1, F2, F3, F4).


skip_32_mesos_state_vxlaninfo(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_mesos_state_vxlaninfo(Rest, Z1, Z2,
					     F1, F2, F3, F4).


skip_64_mesos_state_vxlaninfo(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_mesos_state_vxlaninfo(Rest, Z1, Z2,
					     F1, F2, F3, F4).


d_msg_mesos_state_backendinfo(Bin) ->
    dfp_read_field_def_mesos_state_backendinfo(Bin, 0, 0,
					       undefined).

dfp_read_field_def_mesos_state_backendinfo(<<10,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    d_field_mesos_state_backendinfo_vxlan(Rest, Z1, Z2, F1);
dfp_read_field_def_mesos_state_backendinfo(<<>>, 0, 0,
					   F1) ->
    #mesos_state_backendinfo{vxlan = F1};
dfp_read_field_def_mesos_state_backendinfo(Other, Z1,
					   Z2, F1) ->
    dg_read_field_def_mesos_state_backendinfo(Other, Z1, Z2,
					      F1).

dg_read_field_def_mesos_state_backendinfo(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_backendinfo(Rest, N + 7,
					      X bsl N + Acc, F1);
dg_read_field_def_mesos_state_backendinfo(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mesos_state_backendinfo_vxlan(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mesos_state_backendinfo(Rest, 0, 0, F1);
	    1 -> skip_64_mesos_state_backendinfo(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_mesos_state_backendinfo(Rest, 0,
							      0, F1);
	    5 -> skip_32_mesos_state_backendinfo(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_mesos_state_backendinfo(<<>>, 0, 0,
					  F1) ->
    #mesos_state_backendinfo{vxlan = F1}.

d_field_mesos_state_backendinfo_vxlan(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1)
    when N < 57 ->
    d_field_mesos_state_backendinfo_vxlan(Rest, N + 7,
					  X bsl N + Acc, F1);
d_field_mesos_state_backendinfo_vxlan(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, mesos_state_vxlaninfo),
    dfp_read_field_def_mesos_state_backendinfo(Rest2, 0, 0,
					       if F1 == undefined -> NewFValue;
						  true ->
						      merge_msg_mesos_state_vxlaninfo(F1,
										      NewFValue)
					       end).


skip_varint_mesos_state_backendinfo(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    skip_varint_mesos_state_backendinfo(Rest, Z1, Z2, F1);
skip_varint_mesos_state_backendinfo(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    dfp_read_field_def_mesos_state_backendinfo(Rest, Z1, Z2,
					       F1).


skip_length_delimited_mesos_state_backendinfo(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_mesos_state_backendinfo(Rest,
						  N + 7, X bsl N + Acc, F1);
skip_length_delimited_mesos_state_backendinfo(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_backendinfo(Rest2, 0, 0,
					       F1).


skip_32_mesos_state_backendinfo(<<_:32, Rest/binary>>,
				Z1, Z2, F1) ->
    dfp_read_field_def_mesos_state_backendinfo(Rest, Z1, Z2,
					       F1).


skip_64_mesos_state_backendinfo(<<_:64, Rest/binary>>,
				Z1, Z2, F1) ->
    dfp_read_field_def_mesos_state_backendinfo(Rest, Z1, Z2,
					       F1).


d_msg_mesos_state_bridgeinfo(Bin) ->
    dfp_read_field_def_mesos_state_bridgeinfo(Bin, 0, 0,
					      undefined, undefined).

dfp_read_field_def_mesos_state_bridgeinfo(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    d_field_mesos_state_bridgeinfo_name(Rest, Z1, Z2, F1,
					F2);
dfp_read_field_def_mesos_state_bridgeinfo(<<18,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    d_field_mesos_state_bridgeinfo_ip(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_mesos_state_bridgeinfo(<<>>, 0, 0,
					  F1, F2) ->
    #mesos_state_bridgeinfo{name = F1, ip = F2};
dfp_read_field_def_mesos_state_bridgeinfo(Other, Z1, Z2,
					  F1, F2) ->
    dg_read_field_def_mesos_state_bridgeinfo(Other, Z1, Z2,
					     F1, F2).

dg_read_field_def_mesos_state_bridgeinfo(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_bridgeinfo(Rest, N + 7,
					     X bsl N + Acc, F1, F2);
dg_read_field_def_mesos_state_bridgeinfo(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mesos_state_bridgeinfo_name(Rest, 0, 0, F1, F2);
      18 ->
	  d_field_mesos_state_bridgeinfo_ip(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mesos_state_bridgeinfo(Rest, 0, 0, F1, F2);
	    1 -> skip_64_mesos_state_bridgeinfo(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_mesos_state_bridgeinfo(Rest, 0, 0,
							     F1, F2);
	    5 -> skip_32_mesos_state_bridgeinfo(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_mesos_state_bridgeinfo(<<>>, 0, 0, F1,
					 F2) ->
    #mesos_state_bridgeinfo{name = F1, ip = F2}.

d_field_mesos_state_bridgeinfo_name(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 57 ->
    d_field_mesos_state_bridgeinfo_name(Rest, N + 7,
					X bsl N + Acc, F1, F2);
d_field_mesos_state_bridgeinfo_name(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_bridgeinfo(Rest2, 0, 0,
					      NewFValue, F2).


d_field_mesos_state_bridgeinfo_ip(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2)
    when N < 57 ->
    d_field_mesos_state_bridgeinfo_ip(Rest, N + 7,
				      X bsl N + Acc, F1, F2);
d_field_mesos_state_bridgeinfo_ip(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_bridgeinfo(Rest2, 0, 0,
					      F1, NewFValue).


skip_varint_mesos_state_bridgeinfo(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    skip_varint_mesos_state_bridgeinfo(Rest, Z1, Z2, F1,
				       F2);
skip_varint_mesos_state_bridgeinfo(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    dfp_read_field_def_mesos_state_bridgeinfo(Rest, Z1, Z2,
					      F1, F2).


skip_length_delimited_mesos_state_bridgeinfo(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_mesos_state_bridgeinfo(Rest,
						 N + 7, X bsl N + Acc, F1, F2);
skip_length_delimited_mesos_state_bridgeinfo(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_bridgeinfo(Rest2, 0, 0,
					      F1, F2).


skip_32_mesos_state_bridgeinfo(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    dfp_read_field_def_mesos_state_bridgeinfo(Rest, Z1, Z2,
					      F1, F2).


skip_64_mesos_state_bridgeinfo(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    dfp_read_field_def_mesos_state_bridgeinfo(Rest, Z1, Z2,
					      F1, F2).


d_msg_mesos_state_overlayinfo(Bin) ->
    dfp_read_field_def_mesos_state_overlayinfo(Bin, 0, 0,
					       undefined, undefined, undefined).

dfp_read_field_def_mesos_state_overlayinfo(<<10,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3) ->
    d_field_mesos_state_overlayinfo_name(Rest, Z1, Z2, F1,
					 F2, F3);
dfp_read_field_def_mesos_state_overlayinfo(<<18,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3) ->
    d_field_mesos_state_overlayinfo_subnet(Rest, Z1, Z2, F1,
					   F2, F3);
dfp_read_field_def_mesos_state_overlayinfo(<<24,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3) ->
    d_field_mesos_state_overlayinfo_prefix(Rest, Z1, Z2, F1,
					   F2, F3);
dfp_read_field_def_mesos_state_overlayinfo(<<>>, 0, 0,
					   F1, F2, F3) ->
    #mesos_state_overlayinfo{name = F1, subnet = F2,
			     prefix = F3};
dfp_read_field_def_mesos_state_overlayinfo(Other, Z1,
					   Z2, F1, F2, F3) ->
    dg_read_field_def_mesos_state_overlayinfo(Other, Z1, Z2,
					      F1, F2, F3).

dg_read_field_def_mesos_state_overlayinfo(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_overlayinfo(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3);
dg_read_field_def_mesos_state_overlayinfo(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mesos_state_overlayinfo_name(Rest, 0, 0, F1, F2,
					       F3);
      18 ->
	  d_field_mesos_state_overlayinfo_subnet(Rest, 0, 0, F1,
						 F2, F3);
      24 ->
	  d_field_mesos_state_overlayinfo_prefix(Rest, 0, 0, F1,
						 F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mesos_state_overlayinfo(Rest, 0, 0, F1, F2,
						    F3);
	    1 ->
		skip_64_mesos_state_overlayinfo(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_mesos_state_overlayinfo(Rest, 0,
							      0, F1, F2, F3);
	    5 ->
		skip_32_mesos_state_overlayinfo(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_mesos_state_overlayinfo(<<>>, 0, 0,
					  F1, F2, F3) ->
    #mesos_state_overlayinfo{name = F1, subnet = F2,
			     prefix = F3}.

d_field_mesos_state_overlayinfo_name(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_mesos_state_overlayinfo_name(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
d_field_mesos_state_overlayinfo_name(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_overlayinfo(Rest2, 0, 0,
					       NewFValue, F2, F3).


d_field_mesos_state_overlayinfo_subnet(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_mesos_state_overlayinfo_subnet(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3);
d_field_mesos_state_overlayinfo_subnet(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_overlayinfo(Rest2, 0, 0,
					       F1, NewFValue, F3).


d_field_mesos_state_overlayinfo_prefix(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_mesos_state_overlayinfo_prefix(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3);
d_field_mesos_state_overlayinfo_prefix(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_mesos_state_overlayinfo(Rest, 0, 0,
					       F1, F2, NewFValue).


skip_varint_mesos_state_overlayinfo(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, F3) ->
    skip_varint_mesos_state_overlayinfo(Rest, Z1, Z2, F1,
					F2, F3);
skip_varint_mesos_state_overlayinfo(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_mesos_state_overlayinfo(Rest, Z1, Z2,
					       F1, F2, F3).


skip_length_delimited_mesos_state_overlayinfo(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_mesos_state_overlayinfo(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3);
skip_length_delimited_mesos_state_overlayinfo(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_overlayinfo(Rest2, 0, 0,
					       F1, F2, F3).


skip_32_mesos_state_overlayinfo(<<_:32, Rest/binary>>,
				Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_mesos_state_overlayinfo(Rest, Z1, Z2,
					       F1, F2, F3).


skip_64_mesos_state_overlayinfo(<<_:64, Rest/binary>>,
				Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_mesos_state_overlayinfo(Rest, Z1, Z2,
					       F1, F2, F3).


d_msg_mesos_state_agentoverlayinfo(Bin) ->
    dfp_read_field_def_mesos_state_agentoverlayinfo(Bin, 0,
						    0, undefined, undefined,
						    undefined, undefined,
						    undefined, undefined).

dfp_read_field_def_mesos_state_agentoverlayinfo(<<10,
						  Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5,
						F6) ->
    d_field_mesos_state_agentoverlayinfo_info(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6);
dfp_read_field_def_mesos_state_agentoverlayinfo(<<18,
						  Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5,
						F6) ->
    d_field_mesos_state_agentoverlayinfo_subnet(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6);
dfp_read_field_def_mesos_state_agentoverlayinfo(<<26,
						  Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5,
						F6) ->
    d_field_mesos_state_agentoverlayinfo_mesos_bridge(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6);
dfp_read_field_def_mesos_state_agentoverlayinfo(<<34,
						  Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5,
						F6) ->
    d_field_mesos_state_agentoverlayinfo_docker_bridge(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6);
dfp_read_field_def_mesos_state_agentoverlayinfo(<<42,
						  Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5,
						F6) ->
    d_field_mesos_state_agentoverlayinfo_backend(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6);
dfp_read_field_def_mesos_state_agentoverlayinfo(<<50,
						  Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5,
						F6) ->
    d_field_mesos_state_agentoverlayinfo_state(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6);
dfp_read_field_def_mesos_state_agentoverlayinfo(<<>>, 0,
						0, F1, F2, F3, F4, F5, F6) ->
    #mesos_state_agentoverlayinfo{info = F1, subnet = F2,
				  mesos_bridge = F3, docker_bridge = F4,
				  backend = F5, state = F6};
dfp_read_field_def_mesos_state_agentoverlayinfo(Other,
						Z1, Z2, F1, F2, F3, F4, F5,
						F6) ->
    dg_read_field_def_mesos_state_agentoverlayinfo(Other,
						   Z1, Z2, F1, F2, F3, F4, F5,
						   F6).

dg_read_field_def_mesos_state_agentoverlayinfo(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_agentoverlayinfo(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6);
dg_read_field_def_mesos_state_agentoverlayinfo(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5,
					       F6) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mesos_state_agentoverlayinfo_info(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6);
      18 ->
	  d_field_mesos_state_agentoverlayinfo_subnet(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6);
      26 ->
	  d_field_mesos_state_agentoverlayinfo_mesos_bridge(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, F6);
      34 ->
	  d_field_mesos_state_agentoverlayinfo_docker_bridge(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5, F6);
      42 ->
	  d_field_mesos_state_agentoverlayinfo_backend(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6);
      50 ->
	  d_field_mesos_state_agentoverlayinfo_state(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mesos_state_agentoverlayinfo(Rest, 0, 0, F1,
							 F2, F3, F4, F5, F6);
	    1 ->
		skip_64_mesos_state_agentoverlayinfo(Rest, 0, 0, F1, F2,
						     F3, F4, F5, F6);
	    2 ->
		skip_length_delimited_mesos_state_agentoverlayinfo(Rest,
								   0, 0, F1, F2,
								   F3, F4, F5,
								   F6);
	    5 ->
		skip_32_mesos_state_agentoverlayinfo(Rest, 0, 0, F1, F2,
						     F3, F4, F5, F6)
	  end
    end;
dg_read_field_def_mesos_state_agentoverlayinfo(<<>>, 0,
					       0, F1, F2, F3, F4, F5, F6) ->
    #mesos_state_agentoverlayinfo{info = F1, subnet = F2,
				  mesos_bridge = F3, docker_bridge = F4,
				  backend = F5, state = F6}.

d_field_mesos_state_agentoverlayinfo_info(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_mesos_state_agentoverlayinfo_info(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6);
d_field_mesos_state_agentoverlayinfo_info(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, mesos_state_overlayinfo),
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest2,
						    0, 0,
						    if F1 == undefined ->
							   NewFValue;
						       true ->
							   merge_msg_mesos_state_overlayinfo(F1,
											     NewFValue)
						    end,
						    F2, F3, F4, F5, F6).


d_field_mesos_state_agentoverlayinfo_subnet(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_mesos_state_agentoverlayinfo_subnet(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6);
d_field_mesos_state_agentoverlayinfo_subnet(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, _, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest2,
						    0, 0, F1, NewFValue, F3, F4,
						    F5, F6).


d_field_mesos_state_agentoverlayinfo_mesos_bridge(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6)
    when N < 57 ->
    d_field_mesos_state_agentoverlayinfo_mesos_bridge(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5, F6);
d_field_mesos_state_agentoverlayinfo_mesos_bridge(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, mesos_state_bridgeinfo),
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest2,
						    0, 0, F1, F2,
						    if F3 == undefined ->
							   NewFValue;
						       true ->
							   merge_msg_mesos_state_bridgeinfo(F3,
											    NewFValue)
						    end,
						    F4, F5, F6).


d_field_mesos_state_agentoverlayinfo_docker_bridge(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6)
    when N < 57 ->
    d_field_mesos_state_agentoverlayinfo_docker_bridge(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6);
d_field_mesos_state_agentoverlayinfo_docker_bridge(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, mesos_state_bridgeinfo),
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest2,
						    0, 0, F1, F2, F3,
						    if F4 == undefined ->
							   NewFValue;
						       true ->
							   merge_msg_mesos_state_bridgeinfo(F4,
											    NewFValue)
						    end,
						    F5, F6).


d_field_mesos_state_agentoverlayinfo_backend(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_mesos_state_agentoverlayinfo_backend(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6);
d_field_mesos_state_agentoverlayinfo_backend(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, mesos_state_backendinfo),
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest2,
						    0, 0, F1, F2, F3, F4,
						    if F5 == undefined ->
							   NewFValue;
						       true ->
							   merge_msg_mesos_state_backendinfo(F5,
											     NewFValue)
						    end,
						    F6).


d_field_mesos_state_agentoverlayinfo_state(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_mesos_state_agentoverlayinfo_state(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6);
d_field_mesos_state_agentoverlayinfo_state(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos_state_agentoverlayinfo.state'),
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest2,
						    0, 0, F1, F2, F3, F4, F5,
						    if F6 == undefined ->
							   NewFValue;
						       true ->
							   'merge_msg_mesos_state_agentoverlayinfo.state'(F6,
													  NewFValue)
						    end).


skip_varint_mesos_state_agentoverlayinfo(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    skip_varint_mesos_state_agentoverlayinfo(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6);
skip_varint_mesos_state_agentoverlayinfo(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6).


skip_length_delimited_mesos_state_agentoverlayinfo(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6)
    when N < 57 ->
    skip_length_delimited_mesos_state_agentoverlayinfo(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6);
skip_length_delimited_mesos_state_agentoverlayinfo(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest2,
						    0, 0, F1, F2, F3, F4, F5,
						    F6).


skip_32_mesos_state_agentoverlayinfo(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6).


skip_64_mesos_state_agentoverlayinfo(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_mesos_state_agentoverlayinfo(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6).


d_msg_mesos_state_agentinfo(Bin) ->
    dfp_read_field_def_mesos_state_agentinfo(Bin, 0, 0,
					     undefined, []).

dfp_read_field_def_mesos_state_agentinfo(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, F2) ->
    d_field_mesos_state_agentinfo_ip(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_mesos_state_agentinfo(<<18,
					   Rest/binary>>,
					 Z1, Z2, F1, F2) ->
    d_field_mesos_state_agentinfo_overlays(Rest, Z1, Z2, F1,
					   F2);
dfp_read_field_def_mesos_state_agentinfo(<<>>, 0, 0, F1,
					 F2) ->
    #mesos_state_agentinfo{ip = F1,
			   overlays = lists:reverse(F2)};
dfp_read_field_def_mesos_state_agentinfo(Other, Z1, Z2,
					 F1, F2) ->
    dg_read_field_def_mesos_state_agentinfo(Other, Z1, Z2,
					    F1, F2).

dg_read_field_def_mesos_state_agentinfo(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_agentinfo(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
dg_read_field_def_mesos_state_agentinfo(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mesos_state_agentinfo_ip(Rest, 0, 0, F1, F2);
      18 ->
	  d_field_mesos_state_agentinfo_overlays(Rest, 0, 0, F1,
						 F2);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mesos_state_agentinfo(Rest, 0, 0, F1, F2);
	    1 -> skip_64_mesos_state_agentinfo(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_mesos_state_agentinfo(Rest, 0, 0,
							    F1, F2);
	    5 -> skip_32_mesos_state_agentinfo(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_mesos_state_agentinfo(<<>>, 0, 0, F1,
					F2) ->
    #mesos_state_agentinfo{ip = F1,
			   overlays = lists:reverse(F2)}.

d_field_mesos_state_agentinfo_ip(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 57 ->
    d_field_mesos_state_agentinfo_ip(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
d_field_mesos_state_agentinfo_ip(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_agentinfo(Rest2, 0, 0,
					     NewFValue, F2).


d_field_mesos_state_agentinfo_overlays(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2)
    when N < 57 ->
    d_field_mesos_state_agentinfo_overlays(Rest, N + 7,
					   X bsl N + Acc, F1, F2);
d_field_mesos_state_agentinfo_overlays(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   mesos_state_agentoverlayinfo),
    dfp_read_field_def_mesos_state_agentinfo(Rest2, 0, 0,
					     F1, [NewFValue | F2]).


skip_varint_mesos_state_agentinfo(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2) ->
    skip_varint_mesos_state_agentinfo(Rest, Z1, Z2, F1, F2);
skip_varint_mesos_state_agentinfo(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2) ->
    dfp_read_field_def_mesos_state_agentinfo(Rest, Z1, Z2,
					     F1, F2).


skip_length_delimited_mesos_state_agentinfo(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_mesos_state_agentinfo(Rest, N + 7,
						X bsl N + Acc, F1, F2);
skip_length_delimited_mesos_state_agentinfo(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_agentinfo(Rest2, 0, 0,
					     F1, F2).


skip_32_mesos_state_agentinfo(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2) ->
    dfp_read_field_def_mesos_state_agentinfo(Rest, Z1, Z2,
					     F1, F2).


skip_64_mesos_state_agentinfo(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2) ->
    dfp_read_field_def_mesos_state_agentinfo(Rest, Z1, Z2,
					     F1, F2).


d_msg_mesos_state_state(Bin) ->
    dfp_read_field_def_mesos_state_state(Bin, 0, 0, [], []).

dfp_read_field_def_mesos_state_state(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    d_field_mesos_state_state_overlays(Rest, Z1, Z2, F1,
				       F2);
dfp_read_field_def_mesos_state_state(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    d_field_mesos_state_state_agents(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_mesos_state_state(<<>>, 0, 0, F1,
				     F2) ->
    #mesos_state_state{overlays = lists:reverse(F1),
		       agents = lists:reverse(F2)};
dfp_read_field_def_mesos_state_state(Other, Z1, Z2, F1,
				     F2) ->
    dg_read_field_def_mesos_state_state(Other, Z1, Z2, F1,
					F2).

dg_read_field_def_mesos_state_state(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_state(Rest, N + 7,
					X bsl N + Acc, F1, F2);
dg_read_field_def_mesos_state_state(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mesos_state_state_overlays(Rest, 0, 0, F1, F2);
      18 ->
	  d_field_mesos_state_state_agents(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_mesos_state_state(Rest, 0, 0, F1, F2);
	    1 -> skip_64_mesos_state_state(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_mesos_state_state(Rest, 0, 0, F1,
							F2);
	    5 -> skip_32_mesos_state_state(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_mesos_state_state(<<>>, 0, 0, F1,
				    F2) ->
    #mesos_state_state{overlays = lists:reverse(F1),
		       agents = lists:reverse(F2)}.

d_field_mesos_state_state_overlays(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2)
    when N < 57 ->
    d_field_mesos_state_state_overlays(Rest, N + 7,
				       X bsl N + Acc, F1, F2);
d_field_mesos_state_state_overlays(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, mesos_state_overlayinfo),
    dfp_read_field_def_mesos_state_state(Rest2, 0, 0,
					 [NewFValue | F1], F2).


d_field_mesos_state_state_agents(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 57 ->
    d_field_mesos_state_state_agents(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
d_field_mesos_state_state_agents(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, mesos_state_agentinfo),
    dfp_read_field_def_mesos_state_state(Rest2, 0, 0, F1,
					 [NewFValue | F2]).


skip_varint_mesos_state_state(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    skip_varint_mesos_state_state(Rest, Z1, Z2, F1, F2);
skip_varint_mesos_state_state(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    dfp_read_field_def_mesos_state_state(Rest, Z1, Z2, F1,
					 F2).


skip_length_delimited_mesos_state_state(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_mesos_state_state(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
skip_length_delimited_mesos_state_state(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_state(Rest2, 0, 0, F1,
					 F2).


skip_32_mesos_state_state(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    dfp_read_field_def_mesos_state_state(Rest, Z1, Z2, F1,
					 F2).


skip_64_mesos_state_state(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    dfp_read_field_def_mesos_state_state(Rest, Z1, Z2, F1,
					 F2).


d_msg_mesos_state_networkconfig(Bin) ->
    dfp_read_field_def_mesos_state_networkconfig(Bin, 0, 0,
						 undefined, undefined, []).

dfp_read_field_def_mesos_state_networkconfig(<<10,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3) ->
    d_field_mesos_state_networkconfig_vtep_subnet(Rest, Z1,
						  Z2, F1, F2, F3);
dfp_read_field_def_mesos_state_networkconfig(<<18,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3) ->
    d_field_mesos_state_networkconfig_vtep_mac_oui(Rest, Z1,
						   Z2, F1, F2, F3);
dfp_read_field_def_mesos_state_networkconfig(<<26,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3) ->
    d_field_mesos_state_networkconfig_overlays(Rest, Z1, Z2,
					       F1, F2, F3);
dfp_read_field_def_mesos_state_networkconfig(<<>>, 0, 0,
					     F1, F2, F3) ->
    #mesos_state_networkconfig{vtep_subnet = F1,
			       vtep_mac_oui = F2, overlays = lists:reverse(F3)};
dfp_read_field_def_mesos_state_networkconfig(Other, Z1,
					     Z2, F1, F2, F3) ->
    dg_read_field_def_mesos_state_networkconfig(Other, Z1,
						Z2, F1, F2, F3).

dg_read_field_def_mesos_state_networkconfig(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_mesos_state_networkconfig(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3);
dg_read_field_def_mesos_state_networkconfig(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mesos_state_networkconfig_vtep_subnet(Rest, 0,
							0, F1, F2, F3);
      18 ->
	  d_field_mesos_state_networkconfig_vtep_mac_oui(Rest, 0,
							 0, F1, F2, F3);
      26 ->
	  d_field_mesos_state_networkconfig_overlays(Rest, 0, 0,
						     F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mesos_state_networkconfig(Rest, 0, 0, F1,
						      F2, F3);
	    1 ->
		skip_64_mesos_state_networkconfig(Rest, 0, 0, F1, F2,
						  F3);
	    2 ->
		skip_length_delimited_mesos_state_networkconfig(Rest, 0,
								0, F1, F2, F3);
	    5 ->
		skip_32_mesos_state_networkconfig(Rest, 0, 0, F1, F2,
						  F3)
	  end
    end;
dg_read_field_def_mesos_state_networkconfig(<<>>, 0, 0,
					    F1, F2, F3) ->
    #mesos_state_networkconfig{vtep_subnet = F1,
			       vtep_mac_oui = F2, overlays = lists:reverse(F3)}.

d_field_mesos_state_networkconfig_vtep_subnet(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_mesos_state_networkconfig_vtep_subnet(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3);
d_field_mesos_state_networkconfig_vtep_subnet(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_networkconfig(Rest2, 0,
						 0, NewFValue, F2, F3).


d_field_mesos_state_networkconfig_vtep_mac_oui(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_mesos_state_networkconfig_vtep_mac_oui(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3);
d_field_mesos_state_networkconfig_vtep_mac_oui(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mesos_state_networkconfig(Rest2, 0,
						 0, F1, NewFValue, F3).


d_field_mesos_state_networkconfig_overlays(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_mesos_state_networkconfig_overlays(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3);
d_field_mesos_state_networkconfig_overlays(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, mesos_state_overlayinfo),
    dfp_read_field_def_mesos_state_networkconfig(Rest2, 0,
						 0, F1, F2, [NewFValue | F3]).


skip_varint_mesos_state_networkconfig(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    skip_varint_mesos_state_networkconfig(Rest, Z1, Z2, F1,
					  F2, F3);
skip_varint_mesos_state_networkconfig(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_mesos_state_networkconfig(Rest, Z1,
						 Z2, F1, F2, F3).


skip_length_delimited_mesos_state_networkconfig(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_mesos_state_networkconfig(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3);
skip_length_delimited_mesos_state_networkconfig(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mesos_state_networkconfig(Rest2, 0,
						 0, F1, F2, F3).


skip_32_mesos_state_networkconfig(<<_:32, Rest/binary>>,
				  Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_mesos_state_networkconfig(Rest, Z1,
						 Z2, F1, F2, F3).


skip_64_mesos_state_networkconfig(<<_:64, Rest/binary>>,
				  Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_mesos_state_networkconfig(Rest, Z1,
						 Z2, F1, F2, F3).




merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #'mesos_state_agentoverlayinfo.state'{} ->
	  'merge_msg_mesos_state_agentoverlayinfo.state'(Prev,
							 New);
      #mesos_state_vxlaninfo{} ->
	  merge_msg_mesos_state_vxlaninfo(Prev, New);
      #mesos_state_backendinfo{} ->
	  merge_msg_mesos_state_backendinfo(Prev, New);
      #mesos_state_bridgeinfo{} ->
	  merge_msg_mesos_state_bridgeinfo(Prev, New);
      #mesos_state_overlayinfo{} ->
	  merge_msg_mesos_state_overlayinfo(Prev, New);
      #mesos_state_agentoverlayinfo{} ->
	  merge_msg_mesos_state_agentoverlayinfo(Prev, New);
      #mesos_state_agentinfo{} ->
	  merge_msg_mesos_state_agentinfo(Prev, New);
      #mesos_state_state{} ->
	  merge_msg_mesos_state_state(Prev, New);
      #mesos_state_networkconfig{} ->
	  merge_msg_mesos_state_networkconfig(Prev, New)
    end.

'merge_msg_mesos_state_agentoverlayinfo.state'(Prev,
					       undefined) ->
    Prev;
'merge_msg_mesos_state_agentoverlayinfo.state'(undefined,
					       New) ->
    New;
'merge_msg_mesos_state_agentoverlayinfo.state'(#'mesos_state_agentoverlayinfo.state'{status
											 =
											 PFstatus,
										     error
											 =
											 PFerror},
					       #'mesos_state_agentoverlayinfo.state'{status
											 =
											 NFstatus,
										     error
											 =
											 NFerror}) ->
    #'mesos_state_agentoverlayinfo.state'{status =
					      if NFstatus =:= undefined ->
						     PFstatus;
						 true -> NFstatus
					      end,
					  error =
					      if NFerror =:= undefined ->
						     PFerror;
						 true -> NFerror
					      end}.

merge_msg_mesos_state_vxlaninfo(Prev, undefined) ->
    Prev;
merge_msg_mesos_state_vxlaninfo(undefined, New) -> New;
merge_msg_mesos_state_vxlaninfo(#mesos_state_vxlaninfo{vni
							   = PFvni,
						       vtep_name = PFvtep_name,
						       vtep_ip = PFvtep_ip,
						       vtep_mac = PFvtep_mac},
				#mesos_state_vxlaninfo{vni = NFvni,
						       vtep_name = NFvtep_name,
						       vtep_ip = NFvtep_ip,
						       vtep_mac =
							   NFvtep_mac}) ->
    #mesos_state_vxlaninfo{vni =
			       if NFvni =:= undefined -> PFvni;
				  true -> NFvni
			       end,
			   vtep_name =
			       if NFvtep_name =:= undefined -> PFvtep_name;
				  true -> NFvtep_name
			       end,
			   vtep_ip =
			       if NFvtep_ip =:= undefined -> PFvtep_ip;
				  true -> NFvtep_ip
			       end,
			   vtep_mac =
			       if NFvtep_mac =:= undefined -> PFvtep_mac;
				  true -> NFvtep_mac
			       end}.

merge_msg_mesos_state_backendinfo(#mesos_state_backendinfo{vxlan
							       = PFvxlan},
				  #mesos_state_backendinfo{vxlan = NFvxlan}) ->
    #mesos_state_backendinfo{vxlan =
				 merge_msg_mesos_state_vxlaninfo(PFvxlan,
								 NFvxlan)}.

merge_msg_mesos_state_bridgeinfo(Prev, undefined) ->
    Prev;
merge_msg_mesos_state_bridgeinfo(undefined, New) -> New;
merge_msg_mesos_state_bridgeinfo(#mesos_state_bridgeinfo{name
							     = PFname,
							 ip = PFip},
				 #mesos_state_bridgeinfo{name = NFname,
							 ip = NFip}) ->
    #mesos_state_bridgeinfo{name =
				if NFname =:= undefined -> PFname;
				   true -> NFname
				end,
			    ip =
				if NFip =:= undefined -> PFip;
				   true -> NFip
				end}.

merge_msg_mesos_state_overlayinfo(#mesos_state_overlayinfo{name
							       = PFname,
							   subnet = PFsubnet,
							   prefix = PFprefix},
				  #mesos_state_overlayinfo{name = NFname,
							   subnet = NFsubnet,
							   prefix =
							       NFprefix}) ->
    #mesos_state_overlayinfo{name =
				 if NFname =:= undefined -> PFname;
				    true -> NFname
				 end,
			     subnet =
				 if NFsubnet =:= undefined -> PFsubnet;
				    true -> NFsubnet
				 end,
			     prefix =
				 if NFprefix =:= undefined -> PFprefix;
				    true -> NFprefix
				 end}.

merge_msg_mesos_state_agentoverlayinfo(#mesos_state_agentoverlayinfo{info
									 =
									 PFinfo,
								     subnet =
									 PFsubnet,
								     mesos_bridge
									 =
									 PFmesos_bridge,
								     docker_bridge
									 =
									 PFdocker_bridge,
								     backend =
									 PFbackend,
								     state =
									 PFstate},
				       #mesos_state_agentoverlayinfo{info =
									 NFinfo,
								     subnet =
									 NFsubnet,
								     mesos_bridge
									 =
									 NFmesos_bridge,
								     docker_bridge
									 =
									 NFdocker_bridge,
								     backend =
									 NFbackend,
								     state =
									 NFstate}) ->
    #mesos_state_agentoverlayinfo{info =
				      merge_msg_mesos_state_overlayinfo(PFinfo,
									NFinfo),
				  subnet =
				      if NFsubnet =:= undefined -> PFsubnet;
					 true -> NFsubnet
				      end,
				  mesos_bridge =
				      merge_msg_mesos_state_bridgeinfo(PFmesos_bridge,
								       NFmesos_bridge),
				  docker_bridge =
				      merge_msg_mesos_state_bridgeinfo(PFdocker_bridge,
								       NFdocker_bridge),
				  backend =
				      merge_msg_mesos_state_backendinfo(PFbackend,
									NFbackend),
				  state =
				      'merge_msg_mesos_state_agentoverlayinfo.state'(PFstate,
										     NFstate)}.

merge_msg_mesos_state_agentinfo(#mesos_state_agentinfo{ip
							   = PFip,
						       overlays = PFoverlays},
				#mesos_state_agentinfo{ip = NFip,
						       overlays =
							   NFoverlays}) ->
    #mesos_state_agentinfo{ip =
			       if NFip =:= undefined -> PFip;
				  true -> NFip
			       end,
			   overlays = PFoverlays ++ NFoverlays}.

merge_msg_mesos_state_state(#mesos_state_state{overlays
						   = PFoverlays,
					       agents = PFagents},
			    #mesos_state_state{overlays = NFoverlays,
					       agents = NFagents}) ->
    #mesos_state_state{overlays = PFoverlays ++ NFoverlays,
		       agents = PFagents ++ NFagents}.

merge_msg_mesos_state_networkconfig(#mesos_state_networkconfig{vtep_subnet
								   =
								   PFvtep_subnet,
							       vtep_mac_oui =
								   PFvtep_mac_oui,
							       overlays =
								   PFoverlays},
				    #mesos_state_networkconfig{vtep_subnet =
								   NFvtep_subnet,
							       vtep_mac_oui =
								   NFvtep_mac_oui,
							       overlays =
								   NFoverlays}) ->
    #mesos_state_networkconfig{vtep_subnet =
				   if NFvtep_subnet =:= undefined ->
					  PFvtep_subnet;
				      true -> NFvtep_subnet
				   end,
			       vtep_mac_oui =
				   if NFvtep_mac_oui =:= undefined ->
					  PFvtep_mac_oui;
				      true -> NFvtep_mac_oui
				   end,
			       overlays = PFoverlays ++ NFoverlays}.



verify_msg(Msg) ->
    case Msg of
      #'mesos_state_agentoverlayinfo.state'{} ->
	  'v_msg_mesos_state_agentoverlayinfo.state'(Msg,
						     ['mesos_state_agentoverlayinfo.state']);
      #mesos_state_vxlaninfo{} ->
	  v_msg_mesos_state_vxlaninfo(Msg,
				      [mesos_state_vxlaninfo]);
      #mesos_state_backendinfo{} ->
	  v_msg_mesos_state_backendinfo(Msg,
					[mesos_state_backendinfo]);
      #mesos_state_bridgeinfo{} ->
	  v_msg_mesos_state_bridgeinfo(Msg,
				       [mesos_state_bridgeinfo]);
      #mesos_state_overlayinfo{} ->
	  v_msg_mesos_state_overlayinfo(Msg,
					[mesos_state_overlayinfo]);
      #mesos_state_agentoverlayinfo{} ->
	  v_msg_mesos_state_agentoverlayinfo(Msg,
					     [mesos_state_agentoverlayinfo]);
      #mesos_state_agentinfo{} ->
	  v_msg_mesos_state_agentinfo(Msg,
				      [mesos_state_agentinfo]);
      #mesos_state_state{} ->
	  v_msg_mesos_state_state(Msg, [mesos_state_state]);
      #mesos_state_networkconfig{} ->
	  v_msg_mesos_state_networkconfig(Msg,
					  [mesos_state_networkconfig]);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


'v_msg_mesos_state_agentoverlayinfo.state'(#'mesos_state_agentoverlayinfo.state'{status
										     =
										     F1,
										 error
										     =
										     F2},
					   Path) ->
    'v_enum_AgentOverlayInfo.State.Status'(F1,
					   [status | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [error | Path])
    end,
    ok;
'v_msg_mesos_state_agentoverlayinfo.state'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos_state_agentoverlayinfo.state'},
		  X, Path).

v_msg_mesos_state_vxlaninfo(#mesos_state_vxlaninfo{vni =
						       F1,
						   vtep_name = F2, vtep_ip = F3,
						   vtep_mac = F4},
			    Path) ->
    v_type_uint32(F1, [vni | Path]),
    v_type_string(F2, [vtep_name | Path]),
    v_type_string(F3, [vtep_ip | Path]),
    v_type_string(F4, [vtep_mac | Path]),
    ok;
v_msg_mesos_state_vxlaninfo(X, Path) ->
    mk_type_error({expected_msg, mesos_state_vxlaninfo}, X,
		  Path).

v_msg_mesos_state_backendinfo(#mesos_state_backendinfo{vxlan
							   = F1},
			      Path) ->
    if F1 == undefined -> ok;
       true -> v_msg_mesos_state_vxlaninfo(F1, [vxlan | Path])
    end,
    ok;
v_msg_mesos_state_backendinfo(X, Path) ->
    mk_type_error({expected_msg, mesos_state_backendinfo},
		  X, Path).

v_msg_mesos_state_bridgeinfo(#mesos_state_bridgeinfo{name
							 = F1,
						     ip = F2},
			     Path) ->
    v_type_string(F1, [name | Path]),
    v_type_string(F2, [ip | Path]),
    ok;
v_msg_mesos_state_bridgeinfo(X, Path) ->
    mk_type_error({expected_msg, mesos_state_bridgeinfo}, X,
		  Path).

v_msg_mesos_state_overlayinfo(#mesos_state_overlayinfo{name
							   = F1,
						       subnet = F2,
						       prefix = F3},
			      Path) ->
    v_type_string(F1, [name | Path]),
    v_type_string(F2, [subnet | Path]),
    v_type_uint32(F3, [prefix | Path]),
    ok;
v_msg_mesos_state_overlayinfo(X, Path) ->
    mk_type_error({expected_msg, mesos_state_overlayinfo},
		  X, Path).

v_msg_mesos_state_agentoverlayinfo(#mesos_state_agentoverlayinfo{info
								     = F1,
								 subnet = F2,
								 mesos_bridge =
								     F3,
								 docker_bridge =
								     F4,
								 backend = F5,
								 state = F6},
				   Path) ->
    v_msg_mesos_state_overlayinfo(F1, [info | Path]),
    v_type_string(F2, [subnet | Path]),
    if F3 == undefined -> ok;
       true ->
	   v_msg_mesos_state_bridgeinfo(F3, [mesos_bridge | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_mesos_state_bridgeinfo(F4, [docker_bridge | Path])
    end,
    v_msg_mesos_state_backendinfo(F5, [backend | Path]),
    if F6 == undefined -> ok;
       true ->
	   'v_msg_mesos_state_agentoverlayinfo.state'(F6,
						      [state | Path])
    end,
    ok;
v_msg_mesos_state_agentoverlayinfo(X, Path) ->
    mk_type_error({expected_msg,
		   mesos_state_agentoverlayinfo},
		  X, Path).

v_msg_mesos_state_agentinfo(#mesos_state_agentinfo{ip =
						       F1,
						   overlays = F2},
			    Path) ->
    v_type_string(F1, [ip | Path]),
    if is_list(F2) ->
	   [v_msg_mesos_state_agentoverlayinfo(Elem,
					       [overlays | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, mesos_state_agentoverlayinfo}},
			 F2, Path)
    end,
    ok;
v_msg_mesos_state_agentinfo(X, Path) ->
    mk_type_error({expected_msg, mesos_state_agentinfo}, X,
		  Path).

v_msg_mesos_state_state(#mesos_state_state{overlays =
					       F1,
					   agents = F2},
			Path) ->
    if is_list(F1) ->
	   [v_msg_mesos_state_overlayinfo(Elem, [overlays | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, mesos_state_overlayinfo}},
			 F1, Path)
    end,
    if is_list(F2) ->
	   [v_msg_mesos_state_agentinfo(Elem, [agents | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, mesos_state_agentinfo}},
			 F2, Path)
    end,
    ok.

v_msg_mesos_state_networkconfig(#mesos_state_networkconfig{vtep_subnet
							       = F1,
							   vtep_mac_oui = F2,
							   overlays = F3},
				Path) ->
    v_type_string(F1, [vtep_subnet | Path]),
    v_type_string(F2, [vtep_mac_oui | Path]),
    if is_list(F3) ->
	   [v_msg_mesos_state_overlayinfo(Elem, [overlays | Path])
	    || Elem <- F3];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, mesos_state_overlayinfo}},
			 F3, Path)
    end,
    ok.

'v_enum_AgentOverlayInfo.State.Status'('STATUS_INVALID',
				       _Path) ->
    ok;
'v_enum_AgentOverlayInfo.State.Status'('STATUS_OK',
				       _Path) ->
    ok;
'v_enum_AgentOverlayInfo.State.Status'('STATUS_FAILED',
				       _Path) ->
    ok;
'v_enum_AgentOverlayInfo.State.Status'(X, Path) ->
    mk_type_error({invalid_enum,
		   'AgentOverlayInfo.State.Status'},
		  X, Path).

v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



get_msg_defs() ->
    [{{enum, 'AgentOverlayInfo.State.Status'},
      [{'STATUS_INVALID', 0}, {'STATUS_OK', 1},
       {'STATUS_FAILED', 2}]},
     {{msg, 'mesos_state_agentoverlayinfo.state'},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = {enum, 'AgentOverlayInfo.State.Status'},
	      occurrence = required, opts = []},
       #field{name = error, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, mesos_state_vxlaninfo},
      [#field{name = vni, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = vtep_name, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = vtep_ip, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []},
       #field{name = vtep_mac, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []}]},
     {{msg, mesos_state_backendinfo},
      [#field{name = vxlan, fnum = 1, rnum = 2,
	      type = {msg, mesos_state_vxlaninfo},
	      occurrence = optional, opts = []}]},
     {{msg, mesos_state_bridgeinfo},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = ip, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, mesos_state_overlayinfo},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = subnet, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = prefix, fnum = 3, rnum = 4, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, mesos_state_agentoverlayinfo},
      [#field{name = info, fnum = 1, rnum = 2,
	      type = {msg, mesos_state_overlayinfo},
	      occurrence = required, opts = []},
       #field{name = subnet, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = mesos_bridge, fnum = 3, rnum = 4,
	      type = {msg, mesos_state_bridgeinfo},
	      occurrence = optional, opts = []},
       #field{name = docker_bridge, fnum = 4, rnum = 5,
	      type = {msg, mesos_state_bridgeinfo},
	      occurrence = optional, opts = []},
       #field{name = backend, fnum = 5, rnum = 6,
	      type = {msg, mesos_state_backendinfo},
	      occurrence = required, opts = []},
       #field{name = state, fnum = 6, rnum = 7,
	      type = {msg, 'mesos_state_agentoverlayinfo.state'},
	      occurrence = optional, opts = []}]},
     {{msg, mesos_state_agentinfo},
      [#field{name = ip, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = overlays, fnum = 2, rnum = 3,
	      type = {msg, mesos_state_agentoverlayinfo},
	      occurrence = repeated, opts = []}]},
     {{msg, mesos_state_state},
      [#field{name = overlays, fnum = 1, rnum = 2,
	      type = {msg, mesos_state_overlayinfo},
	      occurrence = repeated, opts = []},
       #field{name = agents, fnum = 2, rnum = 3,
	      type = {msg, mesos_state_agentinfo},
	      occurrence = repeated, opts = []}]},
     {{msg, mesos_state_networkconfig},
      [#field{name = vtep_subnet, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = vtep_mac_oui, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = overlays, fnum = 3, rnum = 4,
	      type = {msg, mesos_state_overlayinfo},
	      occurrence = repeated, opts = []}]}].


get_msg_names() ->
    ['mesos_state_agentoverlayinfo.state',
     mesos_state_vxlaninfo, mesos_state_backendinfo,
     mesos_state_bridgeinfo, mesos_state_overlayinfo,
     mesos_state_agentoverlayinfo, mesos_state_agentinfo,
     mesos_state_state, mesos_state_networkconfig].


get_enum_names() -> ['AgentOverlayInfo.State.Status'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('mesos_state_agentoverlayinfo.state') ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = {enum, 'AgentOverlayInfo.State.Status'},
	    occurrence = required, opts = []},
     #field{name = error, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(mesos_state_vxlaninfo) ->
    [#field{name = vni, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = vtep_name, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = vtep_ip, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []},
     #field{name = vtep_mac, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []}];
find_msg_def(mesos_state_backendinfo) ->
    [#field{name = vxlan, fnum = 1, rnum = 2,
	    type = {msg, mesos_state_vxlaninfo},
	    occurrence = optional, opts = []}];
find_msg_def(mesos_state_bridgeinfo) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = ip, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def(mesos_state_overlayinfo) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = subnet, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = prefix, fnum = 3, rnum = 4, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(mesos_state_agentoverlayinfo) ->
    [#field{name = info, fnum = 1, rnum = 2,
	    type = {msg, mesos_state_overlayinfo},
	    occurrence = required, opts = []},
     #field{name = subnet, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = mesos_bridge, fnum = 3, rnum = 4,
	    type = {msg, mesos_state_bridgeinfo},
	    occurrence = optional, opts = []},
     #field{name = docker_bridge, fnum = 4, rnum = 5,
	    type = {msg, mesos_state_bridgeinfo},
	    occurrence = optional, opts = []},
     #field{name = backend, fnum = 5, rnum = 6,
	    type = {msg, mesos_state_backendinfo},
	    occurrence = required, opts = []},
     #field{name = state, fnum = 6, rnum = 7,
	    type = {msg, 'mesos_state_agentoverlayinfo.state'},
	    occurrence = optional, opts = []}];
find_msg_def(mesos_state_agentinfo) ->
    [#field{name = ip, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = overlays, fnum = 2, rnum = 3,
	    type = {msg, mesos_state_agentoverlayinfo},
	    occurrence = repeated, opts = []}];
find_msg_def(mesos_state_state) ->
    [#field{name = overlays, fnum = 1, rnum = 2,
	    type = {msg, mesos_state_overlayinfo},
	    occurrence = repeated, opts = []},
     #field{name = agents, fnum = 2, rnum = 3,
	    type = {msg, mesos_state_agentinfo},
	    occurrence = repeated, opts = []}];
find_msg_def(mesos_state_networkconfig) ->
    [#field{name = vtep_subnet, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = vtep_mac_oui, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = overlays, fnum = 3, rnum = 4,
	    type = {msg, mesos_state_overlayinfo},
	    occurrence = repeated, opts = []}];
find_msg_def(_) -> error.


find_enum_def('AgentOverlayInfo.State.Status') ->
    [{'STATUS_INVALID', 0}, {'STATUS_OK', 1},
     {'STATUS_FAILED', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('AgentOverlayInfo.State.Status',
		     Value) ->
    'enum_symbol_by_value_AgentOverlayInfo.State.Status'(Value).


enum_value_by_symbol('AgentOverlayInfo.State.Status',
		     Sym) ->
    'enum_value_by_symbol_AgentOverlayInfo.State.Status'(Sym).


'enum_symbol_by_value_AgentOverlayInfo.State.Status'(0) ->
    'STATUS_INVALID';
'enum_symbol_by_value_AgentOverlayInfo.State.Status'(1) ->
    'STATUS_OK';
'enum_symbol_by_value_AgentOverlayInfo.State.Status'(2) ->
    'STATUS_FAILED'.


'enum_value_by_symbol_AgentOverlayInfo.State.Status'('STATUS_INVALID') ->
    0;
'enum_value_by_symbol_AgentOverlayInfo.State.Status'('STATUS_OK') ->
    1;
'enum_value_by_symbol_AgentOverlayInfo.State.Status'('STATUS_FAILED') ->
    2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'mesos.modules.overlay'.



gpb_version_as_string() ->
    "3.20.3".

gpb_version_as_list() ->
    [3,20,3].
